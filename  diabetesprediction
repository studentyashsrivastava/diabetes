{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "474cd4e0",
   "metadata": {
    "papermill": {
     "duration": 0.012717,
     "end_time": "2024-08-02T08:24:09.577182",
     "exception": false,
     "start_time": "2024-08-02T08:24:09.564465",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import libraries & uploading data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "effe9bbd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:09.595065Z",
     "iopub.status.busy": "2024-08-02T08:24:09.594577Z",
     "iopub.status.idle": "2024-08-02T08:24:12.471623Z",
     "shell.execute_reply": "2024-08-02T08:24:12.470322Z"
    },
    "papermill": {
     "duration": 2.889024,
     "end_time": "2024-08-02T08:24:12.474300",
     "exception": false,
     "start_time": "2024-08-02T08:24:09.585276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.metrics import accuracy_score\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87b06ade",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.493553Z",
     "iopub.status.busy": "2024-08-02T08:24:12.492928Z",
     "iopub.status.idle": "2024-08-02T08:24:12.545629Z",
     "shell.execute_reply": "2024-08-02T08:24:12.544366Z"
    },
    "papermill": {
     "duration": 0.065486,
     "end_time": "2024-08-02T08:24:12.548469",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.482983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.171</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>70</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>36.8</td>\n",
       "      <td>0.340</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>121</td>\n",
       "      <td>72</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>26.2</td>\n",
       "      <td>0.245</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.1</td>\n",
       "      <td>0.349</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "      <td>30.4</td>\n",
       "      <td>0.315</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>768 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0              6      148             72             35        0  33.6   \n",
       "1              1       85             66             29        0  26.6   \n",
       "2              8      183             64              0        0  23.3   \n",
       "3              1       89             66             23       94  28.1   \n",
       "4              0      137             40             35      168  43.1   \n",
       "..           ...      ...            ...            ...      ...   ...   \n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27        0  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60              0        0  30.1   \n",
       "767            1       93             70             31        0  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                       0.627   50        1  \n",
       "1                       0.351   31        0  \n",
       "2                       0.672   32        1  \n",
       "3                       0.167   21        0  \n",
       "4                       2.288   33        1  \n",
       "..                        ...  ...      ...  \n",
       "763                     0.171   63        0  \n",
       "764                     0.340   27        0  \n",
       "765                     0.245   30        0  \n",
       "766                     0.349   47        1  \n",
       "767                     0.315   23        0  \n",
       "\n",
       "[768 rows x 9 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv('/kaggle/input/pima-indians-diabetes-database/diabetes.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b85057f8",
   "metadata": {
    "papermill": {
     "duration": 0.007901,
     "end_time": "2024-08-02T08:24:12.564920",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.557019",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Exploring the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7a7e5e17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.583222Z",
     "iopub.status.busy": "2024-08-02T08:24:12.582801Z",
     "iopub.status.idle": "2024-08-02T08:24:12.607784Z",
     "shell.execute_reply": "2024-08-02T08:24:12.606182Z"
    },
    "papermill": {
     "duration": 0.037209,
     "end_time": "2024-08-02T08:24:12.610429",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.573220",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Pregnancies               768 non-null    int64  \n",
      " 1   Glucose                   768 non-null    int64  \n",
      " 2   BloodPressure             768 non-null    int64  \n",
      " 3   SkinThickness             768 non-null    int64  \n",
      " 4   Insulin                   768 non-null    int64  \n",
      " 5   BMI                       768 non-null    float64\n",
      " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
      " 7   Age                       768 non-null    int64  \n",
      " 8   Outcome                   768 non-null    int64  \n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3cd95648",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.629653Z",
     "iopub.status.busy": "2024-08-02T08:24:12.628595Z",
     "iopub.status.idle": "2024-08-02T08:24:12.665063Z",
     "shell.execute_reply": "2024-08-02T08:24:12.663955Z"
    },
    "papermill": {
     "duration": 0.048603,
     "end_time": "2024-08-02T08:24:12.667598",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.618995",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>127.250000</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
       "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
       "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
       "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
       "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age     Outcome  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3c2e7a43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.687834Z",
     "iopub.status.busy": "2024-08-02T08:24:12.686561Z",
     "iopub.status.idle": "2024-08-02T08:24:12.695600Z",
     "shell.execute_reply": "2024-08-02T08:24:12.694552Z"
    },
    "papermill": {
     "duration": 0.021276,
     "end_time": "2024-08-02T08:24:12.697937",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.676661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "853906fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.718608Z",
     "iopub.status.busy": "2024-08-02T08:24:12.717401Z",
     "iopub.status.idle": "2024-08-02T08:24:12.737864Z",
     "shell.execute_reply": "2024-08-02T08:24:12.736746Z"
    },
    "papermill": {
     "duration": 0.033507,
     "end_time": "2024-08-02T08:24:12.740405",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.706898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Null count</th>\n",
       "      <th>Null percentage</th>\n",
       "      <th>n_unique values</th>\n",
       "      <th>data_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Pregnancies</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>17</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glucose</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>136</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BloodPressure</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SkinThickness</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Insulin</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>186</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>248</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>517</td>\n",
       "      <td>float64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>52</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Outcome</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>int64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Null count  Null percentage  n_unique values  \\\n",
       "Pregnancies                        0              0.0               17   \n",
       "Glucose                            0              0.0              136   \n",
       "BloodPressure                      0              0.0               47   \n",
       "SkinThickness                      0              0.0               51   \n",
       "Insulin                            0              0.0              186   \n",
       "BMI                                0              0.0              248   \n",
       "DiabetesPedigreeFunction           0              0.0              517   \n",
       "Age                                0              0.0               52   \n",
       "Outcome                            0              0.0                2   \n",
       "\n",
       "                         data_type  \n",
       "Pregnancies                  int64  \n",
       "Glucose                      int64  \n",
       "BloodPressure                int64  \n",
       "SkinThickness                int64  \n",
       "Insulin                      int64  \n",
       "BMI                        float64  \n",
       "DiabetesPedigreeFunction   float64  \n",
       "Age                          int64  \n",
       "Outcome                      int64  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nans=df.isna().sum().sort_values(ascending=False)\n",
    "pct=nans*100/df.shape[0]\n",
    "uniques=df.nunique()\n",
    "noted=pd.concat([nans,pct,uniques,df.dtypes],axis=1)\n",
    "noted.columns=['Null count','Null percentage','n_unique values','data_type']\n",
    "noted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e72f509a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:12.762240Z",
     "iopub.status.busy": "2024-08-02T08:24:12.761465Z",
     "iopub.status.idle": "2024-08-02T08:24:14.284038Z",
     "shell.execute_reply": "2024-08-02T08:24:14.282883Z"
    },
    "papermill": {
     "duration": 1.535334,
     "end_time": "2024-08-02T08:24:14.286137",
     "exception": false,
     "start_time": "2024-08-02T08:24:12.750803",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x2500 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(3, 3,figsize=(18,25))\n",
    "x=df.columns\n",
    "idx=0\n",
    "for i in range(3):\n",
    "    for j in range(3):\n",
    "        sns.boxplot(ax=ax[i, j], x=df[x[idx]]\n",
    "                    ,color=(0.78366628618847957, 0.1586467902201389, 0.11317188565991266))\n",
    "        ax[i, j].set_title(x[idx])\n",
    "        idx=idx+1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b2307e9",
   "metadata": {
    "papermill": {
     "duration": 0.00971,
     "end_time": "2024-08-02T08:24:14.305934",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.296224",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> features are on different ranges so it requires scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ac142816",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:14.327843Z",
     "iopub.status.busy": "2024-08-02T08:24:14.327430Z",
     "iopub.status.idle": "2024-08-02T08:24:14.678322Z",
     "shell.execute_reply": "2024-08-02T08:24:14.677259Z"
    },
    "papermill": {
     "duration": 0.364546,
     "end_time": "2024-08-02T08:24:14.680635",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.316089",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=df.corr()\n",
    "sns.heatmap(x)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ecd9e39a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:14.705441Z",
     "iopub.status.busy": "2024-08-02T08:24:14.704994Z",
     "iopub.status.idle": "2024-08-02T08:24:14.838855Z",
     "shell.execute_reply": "2024-08-02T08:24:14.837606Z"
    },
    "papermill": {
     "duration": 0.149938,
     "end_time": "2024-08-02T08:24:14.842001",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.692063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=df['Outcome'].value_counts()\n",
    "plt.pie(x,explode=[0, 0.1], autopct='%1.1f%%',labels=[0,1])\n",
    "plt.title(\"Outcome\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d6aea206",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:14.881726Z",
     "iopub.status.busy": "2024-08-02T08:24:14.881164Z",
     "iopub.status.idle": "2024-08-02T08:24:14.891960Z",
     "shell.execute_reply": "2024-08-02T08:24:14.890680Z"
    },
    "papermill": {
     "duration": 0.03529,
     "end_time": "2024-08-02T08:24:14.896205",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.860915",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "111  in  Pregnancies\n",
      "5  in  Glucose\n",
      "35  in  BloodPressure\n",
      "227  in  SkinThickness\n",
      "374  in  Insulin\n",
      "11  in  BMI\n",
      "0  in  DiabetesPedigreeFunction\n",
      "0  in  Age\n",
      "500  in  Outcome\n"
     ]
    }
   ],
   "source": [
    "x=df.columns\n",
    "for col in x:\n",
    "    num_zeros=df[col].eq(0).sum()\n",
    "    print(num_zeros,\" in \",col)\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eaebd0a",
   "metadata": {
    "papermill": {
     "duration": 0.011236,
     "end_time": "2024-08-02T08:24:14.926538",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.915302",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "> there no NaN values in the dataset but there are zereos values which can be considered as a type of missing values in this contest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d7e777e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:14.951780Z",
     "iopub.status.busy": "2024-08-02T08:24:14.951315Z",
     "iopub.status.idle": "2024-08-02T08:24:14.993664Z",
     "shell.execute_reply": "2024-08-02T08:24:14.992518Z"
    },
    "papermill": {
     "duration": 0.05771,
     "end_time": "2024-08-02T08:24:14.996036",
     "exception": false,
     "start_time": "2024-08-02T08:24:14.938326",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>39</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>763</th>\n",
       "      <td>10</td>\n",
       "      <td>101</td>\n",
       "      <td>76</td>\n",
       "      <td>48</td>\n",
       "      <td>180</td>\n",
       "      <td>32.9</td>\n",
       "      <td>0.171</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>764</th>\n",
       "      <td>2</td>\n",
       "      <td>122</td>\n",
       "      <td>70</td>\n",
       "      <td>27</td>\n",
       "      <td>39</td>\n",
       "      <td>36.8</td>\n",
       "      <td>0.340</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>765</th>\n",
       "      <td>5</td>\n",
       "      <td>121</td>\n",
       "      <td>72</td>\n",
       "      <td>23</td>\n",
       "      <td>112</td>\n",
       "      <td>26.2</td>\n",
       "      <td>0.245</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>766</th>\n",
       "      <td>1</td>\n",
       "      <td>126</td>\n",
       "      <td>60</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>30.1</td>\n",
       "      <td>0.349</td>\n",
       "      <td>47</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>767</th>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "      <td>70</td>\n",
       "      <td>31</td>\n",
       "      <td>39</td>\n",
       "      <td>30.4</td>\n",
       "      <td>0.315</td>\n",
       "      <td>23</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>768 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0              6      148             72             35        0  33.6   \n",
       "1              1       85             66             29       39  26.6   \n",
       "2              8      183             64             27        0  23.3   \n",
       "3              1       89             66             23       94  28.1   \n",
       "4              0      137             40             35      168  43.1   \n",
       "..           ...      ...            ...            ...      ...   ...   \n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27       39  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60             27        0  30.1   \n",
       "767            1       93             70             31       39  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                       0.627   50        1  \n",
       "1                       0.351   31        0  \n",
       "2                       0.672   32        1  \n",
       "3                       0.167   21        0  \n",
       "4                       2.288   33        1  \n",
       "..                        ...  ...      ...  \n",
       "763                     0.171   63        0  \n",
       "764                     0.340   27        0  \n",
       "765                     0.245   30        0  \n",
       "766                     0.349   47        1  \n",
       "767                     0.315   23        0  \n",
       "\n",
       "[768 rows x 9 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def filling_zeroes(df, cols): \n",
    "    for col in cols:\n",
    "        med = df.groupby('Outcome')[col].transform('median')\n",
    "        zero_mask = df[col] == 0\n",
    "        df.loc[zero_mask & (df['Outcome'] == 0), col] = med[zero_mask & (df['Outcome'] == 0)]\n",
    "        df.loc[zero_mask & (df['Outcome'] == 1), col] = med[zero_mask & (df['Outcome'] == 1)]\n",
    "    return df\n",
    "df = filling_zeroes(df.copy(), df.columns[1:8])\n",
    "df "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1dca602",
   "metadata": {
    "papermill": {
     "duration": 0.011283,
     "end_time": "2024-08-02T08:24:15.019051",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.007768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Modeling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8ac0c0b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.043936Z",
     "iopub.status.busy": "2024-08-02T08:24:15.043530Z",
     "iopub.status.idle": "2024-08-02T08:24:15.049817Z",
     "shell.execute_reply": "2024-08-02T08:24:15.048809Z"
    },
    "papermill": {
     "duration": 0.021329,
     "end_time": "2024-08-02T08:24:15.052023",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.030694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "featurs=df.drop('Outcome',axis=1)\n",
    "target=df['Outcome']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "61ec479a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.076543Z",
     "iopub.status.busy": "2024-08-02T08:24:15.076106Z",
     "iopub.status.idle": "2024-08-02T08:24:15.085594Z",
     "shell.execute_reply": "2024-08-02T08:24:15.084590Z"
    },
    "papermill": {
     "duration": 0.024485,
     "end_time": "2024-08-02T08:24:15.087894",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.063409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "stds=StandardScaler()\n",
    "x_train,x_test,y_train,y_test =train_test_split(featurs,target,test_size=0.20,random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d767ead7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.112575Z",
     "iopub.status.busy": "2024-08-02T08:24:15.112178Z",
     "iopub.status.idle": "2024-08-02T08:24:15.127564Z",
     "shell.execute_reply": "2024-08-02T08:24:15.126288Z"
    },
    "papermill": {
     "duration": 0.030558,
     "end_time": "2024-08-02T08:24:15.130017",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.099459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
       "                (&#x27;logisticregression&#x27;,\n",
       "                 LogisticRegression(max_iter=17000, random_state=42))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n",
       "                (&#x27;logisticregression&#x27;,\n",
       "                 LogisticRegression(max_iter=17000, random_state=42))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=17000, random_state=42)</pre></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "Pipeline(steps=[('standardscaler', StandardScaler()),\n",
       "                ('logisticregression',\n",
       "                 LogisticRegression(max_iter=17000, random_state=42))])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LogisticRegression(random_state=42,max_iter=17000)\n",
    "pipe_line=make_pipeline(stds,lr)\n",
    "pipe_line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "68bd00db",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.155924Z",
     "iopub.status.busy": "2024-08-02T08:24:15.155222Z",
     "iopub.status.idle": "2024-08-02T08:24:15.201521Z",
     "shell.execute_reply": "2024-08-02T08:24:15.200173Z"
    },
    "papermill": {
     "duration": 0.061895,
     "end_time": "2024-08-02T08:24:15.204010",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.142115",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8051948051948052\n"
     ]
    }
   ],
   "source": [
    "lr.fit(x_train, y_train)\n",
    "y_pred = lr.predict(x_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy:\", accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "042df069",
   "metadata": {
    "papermill": {
     "duration": 0.011584,
     "end_time": "2024-08-02T08:24:15.227707",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.216123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Playing With hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d2cdf225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.254252Z",
     "iopub.status.busy": "2024-08-02T08:24:15.253849Z",
     "iopub.status.idle": "2024-08-02T08:24:15.260298Z",
     "shell.execute_reply": "2024-08-02T08:24:15.259106Z"
    },
    "papermill": {
     "duration": 0.022958,
     "end_time": "2024-08-02T08:24:15.262640",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.239682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_and_evaluate(C, solver):\n",
    "    lr = LogisticRegression(C=C, solver=solver, random_state=42)\n",
    "    pipe_line2=make_pipeline(stds,lr)\n",
    "    pipe_line2.fit(x_train, y_train)\n",
    "\n",
    " \n",
    "    y_pred = pipe_line2.predict(x_test)\n",
    "\n",
    "\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    return accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "50c0df73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.288243Z",
     "iopub.status.busy": "2024-08-02T08:24:15.287811Z",
     "iopub.status.idle": "2024-08-02T08:24:15.711365Z",
     "shell.execute_reply": "2024-08-02T08:24:15.709973Z"
    },
    "papermill": {
     "duration": 0.439419,
     "end_time": "2024-08-02T08:24:15.714013",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.274594",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C=1e-05  , solver='lbfgs'    : Accuracy = 0.6623376623376623\n",
      "C=1e-05  , solver='newton-cg'    : Accuracy = 0.6623376623376623\n",
      "C=1e-05  , solver='sag'    : Accuracy = 0.6623376623376623\n",
      "C=1e-05  , solver='liblinear'    : Accuracy = 0.7337662337662337\n",
      "C=0.0001  , solver='lbfgs'    : Accuracy = 0.6623376623376623\n",
      "C=0.0001  , solver='newton-cg'    : Accuracy = 0.6623376623376623\n",
      "C=0.0001  , solver='sag'    : Accuracy = 0.6623376623376623\n",
      "C=0.0001  , solver='liblinear'    : Accuracy = 0.7337662337662337\n",
      "C=0.001  , solver='lbfgs'    : Accuracy = 0.6558441558441559\n",
      "C=0.001  , solver='newton-cg'    : Accuracy = 0.6558441558441559\n",
      "C=0.001  , solver='sag'    : Accuracy = 0.6558441558441559\n",
      "C=0.001  , solver='liblinear'    : Accuracy = 0.7337662337662337\n",
      "C=0.01  , solver='lbfgs'    : Accuracy = 0.7922077922077922\n",
      "C=0.01  , solver='newton-cg'    : Accuracy = 0.7922077922077922\n",
      "C=0.01  , solver='sag'    : Accuracy = 0.7922077922077922\n",
      "C=0.01  , solver='liblinear'    : Accuracy = 0.7662337662337663\n",
      "C=0.1  , solver='lbfgs'    : Accuracy = 0.7987012987012987\n",
      "C=0.1  , solver='newton-cg'    : Accuracy = 0.7987012987012987\n",
      "C=0.1  , solver='sag'    : Accuracy = 0.7987012987012987\n",
      "C=0.1  , solver='liblinear'    : Accuracy = 0.7987012987012987\n",
      "C=0.2  , solver='lbfgs'    : Accuracy = 0.7987012987012987\n",
      "C=0.2  , solver='newton-cg'    : Accuracy = 0.7987012987012987\n",
      "C=0.2  , solver='sag'    : Accuracy = 0.7987012987012987\n",
      "C=0.2  , solver='liblinear'    : Accuracy = 0.8051948051948052\n",
      "C=1.1  , solver='lbfgs'    : Accuracy = 0.8051948051948052\n",
      "C=1.1  , solver='newton-cg'    : Accuracy = 0.8051948051948052\n",
      "C=1.1  , solver='sag'    : Accuracy = 0.8051948051948052\n",
      "C=1.1  , solver='liblinear'    : Accuracy = 0.8051948051948052\n",
      "C=10  , solver='lbfgs'    : Accuracy = 0.8051948051948052\n",
      "C=10  , solver='newton-cg'    : Accuracy = 0.8051948051948052\n",
      "C=10  , solver='sag'    : Accuracy = 0.8051948051948052\n",
      "C=10  , solver='liblinear'    : Accuracy = 0.8051948051948052\n",
      "C=100  , solver='lbfgs'    : Accuracy = 0.8051948051948052\n",
      "C=100  , solver='newton-cg'    : Accuracy = 0.8051948051948052\n",
      "C=100  , solver='sag'    : Accuracy = 0.8051948051948052\n",
      "C=100  , solver='liblinear'    : Accuracy = 0.8051948051948052\n",
      "C=1000  , solver='lbfgs'    : Accuracy = 0.8051948051948052\n",
      "C=1000  , solver='newton-cg'    : Accuracy = 0.8051948051948052\n",
      "C=1000  , solver='sag'    : Accuracy = 0.8051948051948052\n",
      "C=1000  , solver='liblinear'    : Accuracy = 0.8051948051948052\n",
      "C=10000  , solver='lbfgs'    : Accuracy = 0.8051948051948052\n",
      "C=10000  , solver='newton-cg'    : Accuracy = 0.8051948051948052\n",
      "C=10000  , solver='sag'    : Accuracy = 0.8051948051948052\n",
      "C=10000  , solver='liblinear'    : Accuracy = 0.8051948051948052\n"
     ]
    }
   ],
   "source": [
    "C_values = [0.00001,0.0001,0.001, 0.01, 0.1,0.2, 1.1, 10,100,1000,10000]\n",
    "solver_options = ['lbfgs', 'newton-cg','sag','liblinear']\n",
    "\n",
    "for C in C_values:\n",
    "      for solver in solver_options:\n",
    "        accuracy = train_and_evaluate(C, solver)\n",
    "        print(f\"C={C}  , solver='{solver}'    : Accuracy = {accuracy}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2709c64b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.740165Z",
     "iopub.status.busy": "2024-08-02T08:24:15.739752Z",
     "iopub.status.idle": "2024-08-02T08:24:15.744896Z",
     "shell.execute_reply": "2024-08-02T08:24:15.743773Z"
    },
    "papermill": {
     "duration": 0.020933,
     "end_time": "2024-08-02T08:24:15.747140",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.726207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf=RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6d767fc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:15.774261Z",
     "iopub.status.busy": "2024-08-02T08:24:15.773865Z",
     "iopub.status.idle": "2024-08-02T08:24:16.000465Z",
     "shell.execute_reply": "2024-08-02T08:24:15.999166Z"
    },
    "papermill": {
     "duration": 0.242873,
     "end_time": "2024-08-02T08:24:16.002907",
     "exception": false,
     "start_time": "2024-08-02T08:24:15.760034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "419ac903",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.029553Z",
     "iopub.status.busy": "2024-08-02T08:24:16.029105Z",
     "iopub.status.idle": "2024-08-02T08:24:16.052541Z",
     "shell.execute_reply": "2024-08-02T08:24:16.051214Z"
    },
    "papermill": {
     "duration": 0.03956,
     "end_time": "2024-08-02T08:24:16.055008",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.015448",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.score(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0eeafe36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.082372Z",
     "iopub.status.busy": "2024-08-02T08:24:16.081892Z",
     "iopub.status.idle": "2024-08-02T08:24:16.098908Z",
     "shell.execute_reply": "2024-08-02T08:24:16.097752Z"
    },
    "papermill": {
     "duration": 0.033988,
     "end_time": "2024-08-02T08:24:16.101579",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.067591",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rf_acc=rf.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6feb1f81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.129288Z",
     "iopub.status.busy": "2024-08-02T08:24:16.128240Z",
     "iopub.status.idle": "2024-08-02T08:24:16.152553Z",
     "shell.execute_reply": "2024-08-02T08:24:16.151501Z"
    },
    "papermill": {
     "duration": 0.040676,
     "end_time": "2024-08-02T08:24:16.154971",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.114295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1.1, penalty=&#x27;l1&#x27;, random_state=42, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=1.1, penalty=&#x27;l1&#x27;, random_state=42, solver=&#x27;liblinear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(C=1.1, penalty='l1', random_state=42, solver='liblinear')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = LogisticRegression(C=1.10, penalty='l1', solver='liblinear', random_state=42)\n",
    "clf.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d1fa426f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.183530Z",
     "iopub.status.busy": "2024-08-02T08:24:16.183103Z",
     "iopub.status.idle": "2024-08-02T08:24:16.190641Z",
     "shell.execute_reply": "2024-08-02T08:24:16.189213Z"
    },
    "papermill": {
     "duration": 0.024987,
     "end_time": "2024-08-02T08:24:16.192946",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.167959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred2 = clf.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "fe0287fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.220226Z",
     "iopub.status.busy": "2024-08-02T08:24:16.219808Z",
     "iopub.status.idle": "2024-08-02T08:24:16.227014Z",
     "shell.execute_reply": "2024-08-02T08:24:16.226058Z"
    },
    "papermill": {
     "duration": 0.023661,
     "end_time": "2024-08-02T08:24:16.229399",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.205738",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lr_acc = accuracy_score(y_test, y_pred2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "969b414b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:16.256687Z",
     "iopub.status.busy": "2024-08-02T08:24:16.256261Z",
     "iopub.status.idle": "2024-08-02T08:24:20.412887Z",
     "shell.execute_reply": "2024-08-02T08:24:20.411731Z"
    },
    "papermill": {
     "duration": 4.173226,
     "end_time": "2024-08-02T08:24:20.415494",
     "exception": false,
     "start_time": "2024-08-02T08:24:16.242268",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(kernel=&#x27;linear&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "SVC(kernel='linear')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier = svm.SVC(kernel='linear')\n",
    "classifier.fit(x_train,y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "faee3708",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:20.443021Z",
     "iopub.status.busy": "2024-08-02T08:24:20.442599Z",
     "iopub.status.idle": "2024-08-02T08:24:20.452728Z",
     "shell.execute_reply": "2024-08-02T08:24:20.451417Z"
    },
    "papermill": {
     "duration": 0.02699,
     "end_time": "2024-08-02T08:24:20.455423",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.428433",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_testprediction = classifier.predict(x_test)\n",
    "svm_acc = accuracy_score(X_testprediction, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "20d64859",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:20.483825Z",
     "iopub.status.busy": "2024-08-02T08:24:20.483373Z",
     "iopub.status.idle": "2024-08-02T08:24:20.490189Z",
     "shell.execute_reply": "2024-08-02T08:24:20.488963Z"
    },
    "papermill": {
     "duration": 0.0238,
     "end_time": "2024-08-02T08:24:20.492727",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.468927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[90.25974025974025, 81.16883116883116, 81.16883116883116]\n"
     ]
    }
   ],
   "source": [
    "arr=[rf_acc*100,lr_acc*100,svm_acc*100]\n",
    "print(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c3a7fae8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-08-02T08:24:20.520288Z",
     "iopub.status.busy": "2024-08-02T08:24:20.519860Z",
     "iopub.status.idle": "2024-08-02T08:24:20.727086Z",
     "shell.execute_reply": "2024-08-02T08:24:20.725839Z"
    },
    "papermill": {
     "duration": 0.223775,
     "end_time": "2024-08-02T08:24:20.729475",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.505700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n",
      "  order = pd.unique(vector)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(y=arr,x=['Random forest','Logistic regression','SVM'])\n",
    "plt.title(\"Different algorithms' accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf7824ce",
   "metadata": {
    "papermill": {
     "duration": 0.01288,
     "end_time": "2024-08-02T08:24:20.755945",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.743065",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5085298e",
   "metadata": {
    "papermill": {
     "duration": 0.013072,
     "end_time": "2024-08-02T08:24:20.783480",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.770408",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6ed7229",
   "metadata": {
    "papermill": {
     "duration": 0.013022,
     "end_time": "2024-08-02T08:24:20.809985",
     "exception": false,
     "start_time": "2024-08-02T08:24:20.796963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 228,
     "sourceId": 482,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.266192,
   "end_time": "2024-08-02T08:24:21.546269",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-08-02T08:24:06.280077",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
